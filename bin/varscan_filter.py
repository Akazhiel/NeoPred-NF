#!/usr/bin/env python

import argparse
import sys

def parse_args(args=None):
    Description = "Filter and reformat vcf generated by varscan."
    Epilog = "Example usage: python check_samplesheet.py <FILE_IN> <FILE_OUT>"

    parser = argparse.ArgumentParser(description=Description, epilog=Epilog)
    parser.add_argument("FILE_IN", help="Input vcf file.")
    return parser.parse_args(args)

def index_column_substring(your_list, substring):
    for i, s in enumerate(your_list):
        if substring in s:
            return i
    return -1

def varscan_filter(input):
    """
    Filters a Varscan VCF to reformat the DP4 field and keep only SOMATIC variants that PASS
    Some reformatting is also applied to make the VCF correct
    :param input: the input VCF generated with Varscan
    :param output: the name of filtered VCF file
    :return: None
    """
    filtered_vcf = open('tmp_varscan.vcf', 'w')
    vcf = open(input)
    for line in vcf:
        if line.startswith('#') and 'DP4' in line:
            new_DP4 = line.replace(
                'ID=DP4,Number=1,Type=String,Description="Strand read counts: ref/fwd, ref/rev, var/fwd, var/rev"',
                'ID=DP4,Number=4,Type=Integer,Description="# high-quality ref-forward bases, ref-reverse, alt-forward and alt-reverse bases"')
            filtered_vcf.write(new_DP4)
        elif line.startswith('#CHROM'):
            headers = line.strip().split('\t')
            filtered_vcf.write(line)
        elif not line.startswith('#'):
            columns = line.strip().split('\t')
            Filter = columns[headers.index('FILTER')]
            INFO = columns[headers.index('INFO')]
            if 'SOMATIC' in INFO and 'PASS' in Filter:
                filtered_vcf.write(line)
        else:
            filtered_vcf.write(line)
    vcf.close()
    filtered_vcf.close()

def main(args=None):
    args = parse_args(args)
    varscan_filter(args.FILE_IN)

if __name__ == "__main__":
    sys.exit(main())
