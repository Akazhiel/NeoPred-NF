/*
========================================================================================
    nf-core/neoprednf Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    outdir                     = './results'
    publish_dir_mode           = 'copy'
    refDir                     = null
    genome                     = 'GRCh38'
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
    help                       = false
    monochrome_logs            = false
    validate_params            = true
    schema_ignore_params       = 'genomes,modules'
    email                      = null
    email_on_fail              = null
    hostnames                  = [:]
    sequencing_center          = null
    markdup_java_options       = '"-Xms4000m -Xmx7g"'
    use_gatk_spark             = false
    use_metrics                = true
    target_bed                 = false
    ignore_soft_clipped_bases  = true
    vep_cache                  = null
    DNA                        = null
    RNA                        = null
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'


// Load genomes.config if required
includeConfig 'conf/genomes.config'



profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    docker {
        process.container      = 'hladocker:latest'
        docker.enabled         = true
        docker.userEmulation   = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

manifest {
    name            = 'akazhiel/neoprednf'
    author          = 'Jonatan Gonzalez Rodriguez'
    homePage        = 'https://github.com/akazhiel/neoprednf'
    description     = 'Pipeline that performs variant calling on DNA Tumor-Normal samples and RNA Tumor to predict putative neoantigens that bind to the hla of the patient.'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
